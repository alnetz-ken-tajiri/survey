// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// -------------------------------------------------
// ここからサーベイ関連のモデル
// -------------------------------------------------

model Survey {
    id              String       @id @default(cuid())
    companyId       String?      @map("company_id")
    image           String?      @db.Text //画像のURLを入れる、場合によってはbase64で入れる
    name            String
    startDate       DateTime?    @map("start_date")
    deadline        DateTime?    @map("deadline_date")
    questionGroupId String       @map("question_group_id")
    createdAt       DateTime     @default(now()) @map("created_at")
    status          SurveyStatus @default(INACTIVE)
    updatedAt       DateTime     @default(now()) @updatedAt @map("updated_at")
    deletedAt       DateTime?    @map("deleted_at")

    questionGroup        QuestionGroup         @relation(fields: [questionGroupId], references: [id])
    surveyTargets        SurveyTarget[]
    company              Company?              @relation(fields: [companyId], references: [id])
    emailTemplates       EmailTemplate[]
    surveyDisplaySetting SurveyDisplaySetting?

    @@map("surveys")
}

model SurveyDisplaySetting {
    id           String @id @default(cuid())
    surveyId     String @unique @map("survey_id") // どの質問グループに対する設定か
    displayCount Int    @map("display_count") // 一度に表示する質問の数

    survey Survey @relation(fields: [surveyId], references: [id])

    @@map("survey_display_settings")
}

enum SurveyStatus {
    ACTIVE
    INACTIVE
}

model SurveyTarget {
    id        String             @id @default(cuid())
    surveyId  String             @map("survey_id")
    userId    String             @map("user_id")
    status    SurveyTargetStatus @default(INACTIVE)
    createdAt DateTime           @default(now()) @map("created_at")
    updatedAt DateTime           @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime?          @map("deleted_at")

    survey            Survey             @relation(fields: [surveyId], references: [id])
    user              User               @relation(fields: [userId], references: [id])
    responses         Response[]
    mailNotifications MailNotification[]

    @@unique([surveyId, userId])
    @@index([surveyId], name: "idx_survey_target_survey_id")
    @@index([userId], name: "idx_survey_target_user_id")
    @@map("survey_targets")
}

enum SurveyTargetStatus {
    ACTIVE
    INACTIVE
    NOT_STARTED
    IN_PROGRESS
    COMPLETED
}

model MailNotification {
    id             String                 @id @default(cuid())
    surveyTargetId String                 @map("survey_target_id") // 送信対象の SurveyTarget
    sentAt         DateTime? // 実際に送信した時刻
    status         MailNotificationStatus @default(PENDING) // PENDING, SENT, CANCELLED など状態管理用
    mailType       MailNotificationType // "SURVEY_REMINDER" などメール種類を識別するキー
    // テンプレ名や差し込み変数など追加してもOK

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    surveyTarget SurveyTarget @relation(fields: [surveyTargetId], references: [id])
}

enum MailNotificationStatus {
    PENDING
    SENT
    CANCELLED
}

enum MailNotificationType {
    SURVEY_REMINDER
}

model EmailTemplate {
    id        String    @id @default(cuid())
    surveyId  String
    survey    Survey    @relation(fields: [surveyId], references: [id])
    name      String // テンプレート名
    subject   String // メール件名
    content   String // メール本文（HTML可）
    isDefault Boolean   @default(false)
    variables String[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime? @map("deleted_at")

    @@index([surveyId])
}

///
/// 回答のヘッダ (1つのQuestionに対する回答 or ページ単位など設計次第)
///
model Response {
    id           String    @id @default(cuid())
    targetId     String    @map("target_id") // 回答先のユーザーID
    questionId   String?   @map("question_id")
    questionName String    @map("question_name") // 質問テキストをコピー
    description  String?   @db.Text
    createdAt    DateTime  @default(now()) @map("created_at")
    updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt    DateTime? @map("deleted_at")

    surveyTarget    SurveyTarget     @relation(fields: [targetId], references: [id])
    responseDetails ResponseDetail[]

    @@index([targetId], name: "idx_response_target_id")
    @@map("responses")
}

///
/// 実際の回答内容はここで管理 (1対多)
/// - 複数選択の場合、チェックしたオプション分レコードを作る
/// - テキスト回答の場合、1つのレコードを作り textValue に内容を入れる
/// - 単一選択の場合、1つだけ作って optionId か textValue を入れる
///
model ResponseDetail {
    id               String  @id @default(cuid())
    responseId       String  @map("response_id")
    // 単一選択・複数選択用
    questionOptionId String? @map("question_option_id")
    optionLabel      String? // Option名のコピー
    optionValue      String? // Option値のコピー

    // テキスト回答など
    textValue String? @db.Text

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    // リレーション
    response       Response        @relation(fields: [responseId], references: [id])
    questionOption QuestionOption? @relation(fields: [questionOptionId], references: [id])

    @@map("response_details")
}

model QuestionGroup {
    id          String    @id @default(cuid())
    companyId   String?   @map("company_id")
    name        String
    description String?   @db.Text
    fileUrl     String?   @db.Text
    public      Boolean   @default(false)
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt   DateTime? @map("deleted_at")

    questionGroupQuestions QuestionGroupQuestions[]
    surveys                Survey[]
    company                Company?                 @relation(fields: [companyId], references: [id])

    @@map("question_groups")
}

model QuestionGroupQuestions {
    questionGroupId String    @map("question_group_id")
    questionId      String    @map("question_id")
    createdAt       DateTime  @default(now()) @map("created_at")
    updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt       DateTime? @map("deleted_at")

    questionGroup QuestionGroup @relation(fields: [questionGroupId], references: [id])
    question      Question      @relation(fields: [questionId], references: [id])

    @@id([questionGroupId, questionId])
    @@map("question_group_questions")
}

model Question {
    id          String       @id @default(cuid())
    name        String
    description String?      @db.Text
    companyId   String?      @map("company_id")
    public      Boolean      @default(false)
    order       Int          @default(autoincrement())
    type        QuestionType
    role        QuestionRole @default(NORMAL)
    categoryId  String?      @map("category_id")
    createdAt   DateTime     @default(now()) @map("created_at")
    updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
    deletedAt   DateTime?    @map("deleted_at")

    questionGroupQuestions QuestionGroupQuestions[]
    questionOptions        QuestionOption[]
    company                Company?                 @relation(fields: [companyId], references: [id])

    // 多対多リレーション: Question <-> Tag
    tags Tag[] @relation("QuestionTags")

    fromLinks QuestionLink[] @relation("QuestionRelationsFrom")
    toLinks   QuestionLink[] @relation("QuestionRelationsTo")

    category Category? @relation(fields: [categoryId], references: [id])

    @@map("questions")
}

enum QuestionRole {
    NORMAL
    CATEGORY
}

//中間テーブルは自動生成
model Tag {
    id        String   @id @default(cuid())
    name      String   @unique // タグ名が重複しないようにユニーク制約推奨
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // Questionとの多対多
    questions Question[] @relation("QuestionTags")
}

model QuestionOption {
    id         String @id @default(cuid())
    questionId String @map("question_id")
    name       String // 表示ラベル
    value      String // サーバに送信・保存される値

    question        Question         @relation(fields: [questionId], references: [id])
    responseDetails ResponseDetail[]

    @@map("question_options")
}

enum QuestionType {
    TEXT
    RADIO
    CHECKBOX
    SELECT
    FILE
    CALENDAR
    // 必要に応じて増やす
}

model QuestionLink {
    id             String  @id @default(cuid())
    fromQuestionId String  @map("from_question_id")
    toQuestionId   String  @map("to_question_id")
    relationType   String? // 関係の種類（例："conditional", "dependent" など、必要に応じてenum化も可能）

    fromQuestion Question @relation("QuestionRelationsFrom", fields: [fromQuestionId], references: [id])
    toQuestion   Question @relation("QuestionRelationsTo", fields: [toQuestionId], references: [id])

    @@unique([fromQuestionId, toQuestionId])
    @@map("question_links")
}

model Category {
    id        String     @id @default(cuid())
    name      String
    parentId  String?
    parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
    children  Category[] @relation("CategoryHierarchy")
    companyId String?
    company   Company?   @relation(fields: [companyId], references: [id])
    createdAt DateTime   @default(now()) @map("created_at")
    updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime?  @map("deleted_at")
    questions Question[]

    @@map("categories")
}

// -------------------------------------------------
// ここから既存のUserやEmployee等はそのまま
// -------------------------------------------------

model Connection {
    id        String    @id @default(cuid())
    userId    String    @map("user_id")
    createdAt DateTime  @default(now()) @map("created_at")
    deletedAt DateTime? @map("deleted_at")

    user User @relation(fields: [userId], references: [id])

    @@index([userId], name: "idx_connection_user_id")
    @@map("connections")
}

model Message {
    id              String          @id @default(cuid()) @map("id")
    userId          String          @map("user_id")
    recipientId     String          @map("recipient_id")
    content         String          @db.Text
    createdAt       DateTime        @default(now()) @map("created_at")
    updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at")
    deletedAt       DateTime?       @map("deleted_at")
    readAt          DateTime?       @map("read_at")
    importanceLevel ImportanceLevel @map("importance_level")

    user      User @relation(name: "Sender", fields: [userId], references: [id])
    recipient User @relation(name: "Recipient", fields: [recipientId], references: [id])

    @@index([userId], name: "idx_user_id")
    @@index([createdAt], name: "idx_created_at")
    @@index([recipientId], name: "idx_recipient_id")
    @@map("messages")
}

model Notification {
    id              String          @id @default(cuid()) @map("id")
    userId          String          @map("user_id") // 通知を受け取るユーザーのID
    companyId       String?         @map("company_id") // 参照用　
    title           String          @map("title")
    message         String          @db.Text
    createdBy       String          @map("created_by") // 通知を作成したユーザーのID
    createdAt       DateTime        @default(now()) @map("created_at")
    readAt          DateTime?       @map("read_at")
    deletedAt       DateTime?       @map("deleted_at")
    importanceLevel ImportanceLevel @map("importance_level")

    user    User     @relation(fields: [userId], references: [id])
    company Company? @relation(fields: [companyId], references: [id])

    @@index([userId], name: "idx_notification_user_id")
    @@index([createdAt], name: "idx_notification_created_at")
    @@map("notifications")
}

enum ImportanceLevel {
    LOW
    MEDIUM
    HIGH
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model User {
    id        String    @id @default(cuid())
    loginId   String    @unique @map("login_id")
    email     String    @unique @map("email")
    avatar    String?   @map("avatar")
    password  String?
    role      UserRole? @default(USER) @map("role")
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    // NextAuth 用リレーション
    accounts Account[]
    sessions Session[]

    employee      Employee?
    notifications Notification[]
    surveyTargets SurveyTarget[]
    connections   Connection[]
    messages      Message[]      @relation("Recipient")
    sentMessages  Message[]      @relation("Sender")

    @@map("users")
}

enum UserRole {
    USER // ユーザー
    SUPER_USER // スーパーユーザー 現状未使用 2025/02/09
    ADMIN // 管理者
    USER_ADMIN // ユーザー兼管理者
}

model Employee {
    id        String    @id @default(cuid()) @map("id")
    name      String
    userId    String?   @unique @map("user_id")
    number    String    @unique
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    companyId String  @map("company_id")
    company   Company @relation(fields: [companyId], references: [id])

    organizationId    String?        @map("organization_id")
    organization      Organization?  @relation(fields: [organizationId], references: [id])
    leadOrganizations Organization[] @relation("EmployeeOrganizations")

    user  User?  @relation(fields: [userId], references: [id])
    files File[]

    @@map("employees")
}

model Company {
    id          String    @id @default(cuid()) @map("id")
    companyName String    @map("company_name")
    companyCode String    @unique
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt   DateTime? @map("deleted_at")

    employees                 Employee[]
    organizations             Organization[]
    organizationRelationships OrganizationRelationship[]
    surveys                   Survey[]
    questionGroups            QuestionGroup[]
    questions                 Question[]
    companyDetail             CompanyDetail?
    notifications             Notification[]
    Category                  Category[]

    @@map("companies")
}

model CompanyDetail {
    id                  String    @id @default(cuid()) @map("id")
    companyId           String    @map("company_id")
    address             String?   @map("address")
    phone               String?   @map("phone")
    email               String?   @map("email")
    website             String?   @map("website")
    corporateNumber     String?   @map("corporate_number")
    establishedDate     DateTime? @map("established_date")
    representativeName  String?   @map("representative_name")
    businessDescription String?   @map("business_description")
    numberOfEmployees   Int?      @map("number_of_employees")
    capital             Decimal?  @map("capital")
    fiscalYearEnd       Int?      @map("fiscal_year_end") // 1-12の数字で表現
    industry            String?   @map("industry")
    logoUrl             String?   @map("logo_url")
    linkedinUrl         String?   @map("linkedin_url")
    twitterUrl          String?   @map("twitter_url")
    facebookUrl         String?   @map("facebook_url")
    createdAt           DateTime  @default(now()) @map("created_at")
    updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt           DateTime? @map("deleted_at")
    company             Company   @relation(fields: [companyId], references: [id])

    @@unique([companyId])
    @@map("company_details")
}

model Organization {
    id        String     @id @default(cuid()) @map("id")
    companyId String     @map("company_id")
    name      String     @map("name")
    leaderId  String?    @map("leader_id")
    leader    Employee?  @relation("EmployeeOrganizations", fields: [leaderId], references: [id])
    employees Employee[]
    company   Company    @relation(fields: [companyId], references: [id]) // 修正
    deletedAt DateTime?  @map("deleted_at")

    ancestorRelationships   OrganizationRelationship[] @relation("Ancestor")
    descendantRelationships OrganizationRelationship[] @relation("Descendant")
    organizationDetail      OrganizationDetail?

    @@index([companyId], name: "idx_organization_company_id")
    @@map("organizations")
}

model OrganizationDetail {
    id             String       @id @default(cuid()) @map("id")
    organizationId String       @map("organization_id")
    address        String?      @map("address")
    phone          String?      @map("phone")
    email          String?      @map("email")
    website        String?      @map("website")
    createdAt      DateTime     @default(now()) @map("created_at")
    updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at")
    deletedAt      DateTime?    @map("deleted_at")
    organization   Organization @relation(fields: [organizationId], references: [id])

    @@unique([organizationId])
    @@map("organization_details")
}

model OrganizationRelationship {
    id           String       @id @default(cuid()) @map("id")
    ancestorId   String       @map("ancestor_id")
    descendantId String       @map("descendant_id")
    companyId    String?      @map("company_id")
    depth        Int
    ancestor     Organization @relation("Ancestor", fields: [ancestorId], references: [id])
    descendant   Organization @relation("Descendant", fields: [descendantId], references: [id])
    deletedAt    DateTime?    @map("deleted_at")
    company      Company?     @relation(fields: [companyId], references: [id]) // 修正

    @@unique([ancestorId, descendantId])
    @@index([companyId], name: "idx_organization_relationship_company_id")
    @@map("organization_relationships")
}

model File {
    id         String    @id @default(cuid()) @map("id")
    employeeId String    @map("employee_id")
    fileName   String    @map("file_name")
    type       FileType  @map("type")
    createdAt  DateTime  @default(now()) @map("created_at")
    updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt  DateTime? @map("deleted_at")

    employee Employee @relation(fields: [employeeId], references: [id])

    @@unique([employeeId, fileName])
    @@map("files")
}

enum FileType {
    PROFILE
    CERTIFICATE
    OTHER
}
